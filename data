import streamlit as st
import pandas as pd
import plotly.express as px
from scipy.stats import linregress

# Set page title
st.set_page_config(page_title="CSV Data Analyzer", layout="wide")

# Page 1: CSV Upload and Data Overview
def page1():
    st.title("CSV Data Analyzer")
    
    # CSV file upload
    uploaded_file = st.file_uploader("Choose a CSV file", type="csv")
    
    if uploaded_file is not None:
        data = pd.read_csv(uploaded_file)
        st.success("CSV file uploaded successfully!")
        
        # Data overview
        st.subheader("Data Overview")
        st.write(f"Total Rows: {data.shape[0]}")
        st.write(f"Total Columns: {data.shape[1]}")
        
        # Column list
        st.subheader("Column List")
        columns = data.columns.tolist()
        selected_columns = st.multiselect("Select columns to display", columns)
        
        # Interactive table generation
        if selected_columns:
            num_rows = st.number_input("Number of rows to display", min_value=1, value=10)
            st.dataframe(data[selected_columns].head(num_rows))
        
        # Button to proceed to the next page
        if st.button("Proceed to Chart Generation"):
            st.session_state.data = data
            st.experimental_rerun()

# Page 2: Dynamic Chart Generation
def page2():
    st.title("Dynamic Chart Generation")
    
    if "data" in st.session_state:
        data = st.session_state.data
        columns = data.columns.tolist()
        
        num_charts = st.number_input("Number of charts to generate", min_value=1, max_value=10, value=1)
        
        for i in range(num_charts):
            st.subheader(f"Chart {i+1}")
            
            col1, col2 = st.columns([1, 3])
            
            with col1:
                chart_type = st.selectbox(f"Select chart type for Chart {i+1}", ["Line", "Bar", "Scatter"])
                x_column = st.selectbox(f"Select X-axis column for Chart {i+1}", columns)
                y_columns = st.multiselect(f"Select Y-axis column(s) for Chart {i+1}", columns)
                secondary_y = st.checkbox(f"Add secondary Y-axis for Chart {i+1}")
                
                if x_column and y_columns:
                    x_min = data[x_column].min()
                    x_max = data[x_column].max()
                    x_start = st.number_input(f"X-axis start for Chart {i+1}", value=x_min, min_value=x_min, max_value=x_max)
                    x_end = st.number_input(f"X-axis end for Chart {i+1}", value=x_max, min_value=x_start, max_value=x_max)
                    
                    trendline = st.selectbox(f"Add trendline for Chart {i+1}", ["None", "Linear", "Exponential", "Polynomial"])
                    
                    if trendline != "None":
                        if trendline == "Polynomial":
                            degree = st.number_input(f"Degree of polynomial trendline for Chart {i+1}", min_value=2, max_value=10, value=2)
                        else:
                            degree = 1
            
            with col2:
                if x_column and y_columns:
                    filtered_data = data[(data[x_column] >= x_start) & (data[x_column] <= x_end)]
                    
                    if chart_type == "Line":
                        fig = px.line(filtered_data, x=x_column, y=y_columns)
                    elif chart_type == "Bar":
                        fig = px.bar(filtered_data, x=x_column, y=y_columns)
                    else:
                        fig = px.scatter(filtered_data, x=x_column, y=y_columns)
                    
                    if secondary_y and len(y_columns) > 1:
                        fig.update_layout(yaxis2=dict(title=y_columns[1], side="right", overlaying="y"))
                        fig.update_traces(yaxis="y2", selector=dict(name=y_columns[1]))
                    
                    if trendline != "None":
                        for y_column in y_columns:
                            if trendline == "Linear":
                                slope, intercept, _, _, _ = linregress(filtered_data[x_column], filtered_data[y_column])
                                fig.add_trace(px.line(x=filtered_data[x_column], y=slope * filtered_data[x_column] + intercept).data[0])
                                st.write(f"Linear trendline for {y_column}: y = {slope:.2f}x + {intercept:.2f}")
                            elif trendline == "Exponential":
                                exp_fit = px.scatter(filtered_data, x=x_column, y=y_column, trendline="ols", trendline_options=dict(log_x=True))
                                fig.add_trace(exp_fit.data[-1])
                                st.write(f"Exponential trendline for {y_column}: y = e^(ax + b)")
                            else:
                                poly_fit = px.scatter(filtered_data, x=x_column, y=y_column, trendline="ols", trendline_options=dict(degree=degree))
                                fig.add_trace(poly_fit.data[-1])
                                st.write(f"Polynomial trendline of degree {degree} for {y_column}: y = ax^{degree} + bx^{degree-1} + ... + c")
                    
                    fig.update_layout(title=f"Chart {i+1}", xaxis_title=x_column, yaxis_title=", ".join(y_columns))
                    st.plotly_chart(fig)
                    
                    st.write(f"Chart {i+1} Summary:")
                    st.write(f"X-axis Start: {x_start}")
                    st.write(f"X-axis End: {x_end}")
                    for y_column in y_columns:
                        st.write(f"Average of {y_column}: {filtered_data[y_column].mean():.2f}")
                        st.write(f"Standard Deviation of {y_column}: {filtered_data[y_column].std():.2f}")
                else:
                    st.warning("Please select X-axis and Y-axis column(s) to generate the chart.")
    
    else:
        st.warning("Please upload a CSV file on the previous page.")

# App navigation
page = st.sidebar.radio("Select a page", ["CSV Upload", "Chart Generation"])

if page == "CSV Upload":
    page1()
else:
    page2()